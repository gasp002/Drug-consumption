# -*- coding: utf-8 -*-
"""FlaskPythonProject.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1gO7lGqM3XvnZ8O_vSdmeXj5vbr0rlXbI
"""


from flask import Flask, request, url_for, redirect, render_template, request,render_template_string

import plotly.offline as pyo
import numpy as np
import pandas as pd
import plotly.express as px
import matplotlib.pyplot as plt
import seaborn as sns
import plotly
from io import StringIO

from sklearn.ensemble import RandomForestClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.svm import SVC

from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn.model_selection import GridSearchCV

from sklearn.metrics import accuracy_score
from sklearn.metrics import classification_report

from io import BytesIO
import base64
import plotly.io as pio

import warnings
warnings.filterwarnings('ignore')

"""# Dataframe"""

# DATA Pre-Processing

with open('drug_consumption.data', 'r') as file:
    data = file.read()

# Naming all the columns with their associated names

column_name = ['ID','Age','Sex','Education','Country','Ethnicity','Neuroticism','Extraversion','Openness','Agreeableness','Conscientiousness','Impulsivness','Sensation Seeing','Alcohol','Amphetamines','Amyl Nitrite','Benzodiazepine','Caffeine','Canabis','Chocolate','Cocaine','Crack','Ecstasy','Heroin','Ketamine','Legal Highs','LSD','Methadone','Mushrooms','Nicotine','Semer','VSA']

df = pd.read_csv(StringIO(data), header=None)


df.columns = column_name
df2=df.copy(deep=True)

### Mapping the columns with the values associated with the given data.

df.loc[df['Age'] == -0.95197, 'Age'] = "18-24"
df.loc[df['Age'] == -0.07854, 'Age'] = "25-34"
df.loc[df['Age'] == 0.49788, 'Age'] = "35-44"
df.loc[df['Age'] == 1.09449, 'Age'] = "45-54"
df.loc[df['Age'] == 1.82213, 'Age'] = "55-64"
df.loc[df['Age'] == 2.59171, 'Age'] = "65+"

df.loc[df['Sex'] == -0.48246, 'Sex'] = "Male"
df.loc[df['Sex'] == 0.48246, 'Sex'] = "Female"

education_mapping = {
    -2.43591: 'Left school before 16 years',
    -1.73790: 'Left school at 16 years',
    -1.43719: 'Left school at 17 years',
    -1.22751: 'Left school at 18 years',
    -0.61113: 'Some college or university, no certificate or degree',
    -0.05921: 'Professional certificate/ diploma',
    0.45468: 'University degree',
    1.16365: 'Masters degree',
    1.98437: 'Doctorate degree'
}
df['Education'] = df['Education'].replace(education_mapping)

country_mapping = {
    -0.09765: 'Australia',
    0.24923: 'Canada',
    -0.46841: 'New Zealand',
    -0.28519: 'Other',
    0.21128: 'Republic of Ireland',
    0.96082: 'UK',
    -0.57009: 'USA',
}
df['Country'] = df['Country'].replace(country_mapping)

ethnicity_mapping = {
    -0.50212: 'Asian',
    -1.10702: 'Black',
    1.90725: 'Mixed-Black/Asian',
    0.12600: 'Mixed-White/Asian',
    -0.22166: 'Mixed-White/Black',
    0.11440: 'Other',
    -0.31685: 'White',
}
df['Ethnicity'] = df['Ethnicity'].replace(ethnicity_mapping)

drugs_mapping = {
    'CL0': 'Never Used',
    'CL1': 'Used over a Decade Ago',
    'CL2': 'Used in Last Decade',
    'CL3': 'Used in Last Year',
    'CL4': 'Used in Last Month',
    'CL5': 'Used in Last Week',
    'CL6': 'Used in Last Day',
}

columns_to_categorize = ['Alcohol','Amphetamines','Amyl Nitrite','Benzodiazepine','Caffeine','Canabis','Chocolate','Cocaine','Crack','Ecstasy','Heroin','Ketamine','Legal Highs','LSD','Methadone','Mushrooms','Nicotine','Semer','VSA']

for col in columns_to_categorize:
   df[col] = df[col].replace(drugs_mapping)

# For all the columns with test scores we search on the internet the results considered as High, Average and Low which was High was when the score > mean+std , average = mean-std > score < mean+std, low = score < mean-std
columns_to_categorize_s = ['Neuroticism', 'Extraversion', 'Openness', 'Agreeableness', 'Conscientiousness','Impulsivness','Sensation Seeing']

# Apply the categorization to each specified column
for col in columns_to_categorize_s:
    bins = [-float("inf"), df[col].mean() - df[col].std(), df[col].mean() + df[col].std(), float("inf")]
    labels = ['Low', 'Average', 'High']
    df[col] = pd.cut(df[col], bins=bins, labels=labels)

df = df.set_index('ID')
df_standard = df.copy(deep=True)

df_standard.replace({'New Zealand': 'Other', 'Republic of Ireland':'Other'}, inplace=True)
df_standard.replace({'55-64':'55+','65+':'55+'},inplace=True)
df_standard.replace({"Left school at 17 years":"Left school before 18 years", "Left school at 16 years":"Left school before 18 years","Left school before 16 years":"Left school before 18 years"}, inplace=True)

df_standard.to_csv('df_standard.csv', index=False)



df4=df_standard.copy(deep=True)
df1=df_standard.copy(deep=True)

df_standard = df_standard.astype('str')

drugs_mapping = {
    'Never Used': 0,
    'Used over a Decade Ago': 1,
    'Used in Last Decade': 2,
    'Used in Last Year': 3,
    'Used in Last Month': 4,
    'Used in Last Week': 5,
    'Used in Last Day': 6,
}

columns_to_categorize = ['Alcohol','Amphetamines','Amyl Nitrite','Benzodiazepine','Caffeine','Canabis','Chocolate','Cocaine','Crack','Ecstasy','Heroin','Ketamine','Legal Highs','LSD','Methadone','Mushrooms','Nicotine','Semer','VSA']
for col in columns_to_categorize:
   df4[col] = df4[col].replace(drugs_mapping)

base_columns = ['Age','Sex', 'Education', 'Country', 'Ethnicity', 'Neuroticism', 'Extraversion',
                'Openness', 'Agreeableness', 'Conscientiousness','Impulsivness','Sensation Seeing']

drugs = ['Alcohol', 'Amphetamines', 'Amyl Nitrite', 'Benzodiazepine', 'Caffeine', 'Canabis',
         'Chocolate', 'Cocaine', 'Crack', 'Ecstasy', 'Heroin', 'Ketamine', 'Legal Highs',
         'LSD', 'Methadone', 'Mushrooms', 'Nicotine', 'Semer', 'VSA']

model_data = df_standard[base_columns + drugs]

# Encoding
label_encoders = {}
for col in base_columns + drugs:
    label_encoders[col] = LabelEncoder()
    model_data[col] = label_encoders[col].fit_transform(model_data[col].apply(lambda x: 0 if x == 'Never Used' else 1 if col in drugs else x))

# Train/test split
models = {}
for drug in drugs:
    X = model_data.drop(drugs, axis=1)
    y = model_data[drug]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = RandomForestClassifier(random_state=42)
    model.fit(X_train, y_train)
    models[drug] = model


app = Flask(__name__)

avg_drug_usage_per_country=df4.groupby('Country')[columns_to_categorize].mean()

def country_plot_drug_usage(country):
    plt.figure(figsize=(27,20))
    df_country=avg_drug_usage_per_country.loc[country]
    plt.bar(avg_drug_usage_per_country.columns,df_country)
    plt.title(f"Drug usage in {country}")
    plt.xlabel("Drugs")
    plt.ylabel("Mean Percentage")
    buffer = BytesIO()
    plt.savefig(buffer, format='png')
    buffer.seek(0)
    plot_data = base64.b64encode(buffer.read()).decode('utf-8')
    plt.close()

    return f'<img src="data:image/png;base64,{plot_data}" alt="Bar Plot">'

def survey_percentage(feature):
    counts_by_country = df1[feature].value_counts()
    df1[f'{feature}WithCount'] = df1[feature].apply(lambda x: f"{x} ({counts_by_country[x]})")

    fig = px.pie(df1, names=f'{feature}WithCount', color=f'{feature}WithCount', title=f"Percentage of people surveyed by {feature}")

    return fig

def box_relation(feat1,feat2):
    plot = sns.boxplot(x=feat1, y=feat2, data=df2)
    plt.xticks(rotation=45)
    buffer = BytesIO()
    plt.savefig(buffer, format='png')
    buffer.seek(0)
    plot_data = base64.b64encode(buffer.read()).decode('utf-8')
    plt.close()

    return f'<img src="data:image/png;base64,{plot_data}" alt="Boxplot">'

def predict_drug_use_probability(age, sex, education, country, ethnicity, neuroticism, extraversion, openness, agreeableness, conscientiousness,impulsivness,sensation_seeing):
    encoded_input = {
        'Age': label_encoders['Age'].transform([age])[0],
        'Sex': label_encoders['Sex'].transform([sex])[0],
        'Education': label_encoders['Education'].transform([education])[0],
        'Country': label_encoders['Country'].transform([country])[0],
        'Ethnicity': label_encoders['Ethnicity'].transform([ethnicity])[0],
        'Neuroticism': label_encoders['Neuroticism'].transform([neuroticism])[0],
        'Extraversion': label_encoders['Extraversion'].transform([extraversion])[0],
        'Openness': label_encoders['Openness'].transform([openness])[0],
        'Agreeableness': label_encoders['Agreeableness'].transform([agreeableness])[0],
        'Conscientiousness': label_encoders['Conscientiousness'].transform([conscientiousness])[0],
        'Impulsivness': label_encoders['Impulsivness'].transform([impulsivness])[0],
        'Sensation_Seeing': label_encoders['Sensation Seeing'].transform([sensation_seeing])[0]
    }
    input_df = pd.DataFrame([encoded_input])
    probabilities = {}
    for drug, model in models.items():
        probability = model.predict_proba(input_df)[0][1]
        probabilities[drug] = probability
    return probabilities

@app.route('/', methods=['GET'])
def index():
    return render_template('form.html')

@app.route('/show_graph_imp', methods=['POST','GET'])
def show_graph_imp():
    countries = ['UK','USA','Canada','Australia','Other']
    if request.method == 'POST':
        country = request.form['country']
        country_plot = country_plot_drug_usage(country)
        return render_template('show_graph_imp.html', countries=countries, country_plot=country_plot)

    return render_template('show_graph_imp.html', countries=countries)


@app.route('/dataviz', methods=['GET', 'POST'])
def dataviz():
    features = ['Age', 'Sex', 'Education', 'Country', 'Ethnicity',
            'Neuroticism', 'Extraversion', 'Openness', 'Agreeableness',
            'Conscientiousness', 'Impulsivness', 'Sensation Seeing']

    if request.method == 'POST':
        visualization_type = request.form['visualization_type']
        if visualization_type == 'survey_percentage':
            selected_feature = request.form['feature']
            chart_figure = survey_percentage(selected_feature)
            chart_html = pio.to_html(chart_figure)
            return render_template('dataviz.html', features=features, visualization_type=visualization_type, chart_html=chart_html)
        elif visualization_type == 'box_relation':
            selected_feat1 = request.form['selected_feat1']
            selected_feat2 = request.form['selected_feat2']
            box_plot = box_relation(selected_feat1, selected_feat2)
            return render_template('dataviz.html', features=features, visualization_type=visualization_type, box_plot=box_plot)

    return render_template('dataviz.html', features=features,  visualization_type=None)



@app.route('/predict',methods=['POST'])
def predict():
    age = request.form['age'],
    sex = request.form['Sex'],
    education = request.form['Education'],
    country = request.form['Country'],
    ethnicity = request.form['Ethnicity'],
    neuroticism = request.form['Neuroticism'],
    extraversion = request.form['Extraversion'],
    openness = request.form['Openness'],
    agreeableness = request.form['Agreeableness'],
    conscientiousness = request.form['Conscientiousness'],
    impulsivness = request.form['Impulsivness'],
    sensation_seeing = request.form['Sensation_seeing']
    
    drug_percentages = predict_drug_use_probability(age, sex, education, country, ethnicity, neuroticism, extraversion, openness, agreeableness, conscientiousness,impulsivness,sensation_seeing)
    return render_template('result.html', drug_percentages=drug_percentages)

if __name__ == '__main__':
  app.run(debug=True)